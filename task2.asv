clear all;
close all;
clc;
%% ==============================================Task 1=========================================================

%% Initialize parameters
fs = 8000;
Ts = 1/fs;
L = 256; % so muc luong tu
Nb = log2(L); % so bit can cho ma hoa
fm = [200 800 100];
Am = [1 2 3];
A = 87.6; % compression parameter
phi = [0 pi/2 pi/4];
t = 0:Ts:10; % 10s
Ns = length(t);
%% Sampling
s = zeros(1, length(t));
for kk = 1:length(fm)
    s = s + Am(kk)*cos(2*pi*fm(kk)*t+phi(kk));
end
Amax = max(abs(s));
Sf = fft(s);
Sf = fftshift(Sf);
%% Compress
x1 = compand(s, A, Amax, 'A/compressor');
%% Quantization
delta = 2*Amax/(L - 1);   % buoc luong tu
Mq = -Amax:delta:Amax;  % Gia tri muc luong tu
Ml = 0:L-1; % Cac muc luong tu
xcode = zeros(size(x1));
for k = 1:L
    index = find(x1 > Mq(k)-delta/2 & x1 <= Mq(k)+delta/2);
    xcode(index) = Ml(k);
end
%% Encoding
code = de2bi(xcode);  % chuyen tu decimal sang binary

%% ==============================================Task 2=========================================================

%% Convert binary matrix to data
data = code';
data = data(:);
%% Initialize parameters
Rb = fs*log2(L);
T_sym = 1/Rb;
Es = 2/3*T_sym;
M = 8; % so muc dieu che 8-PSK
SNR = [5 8 12]; % [dB]
%% Modulation
% Create a 8-PSK modulator System object with bits as inputs and Gray-coded signal constellation
hModulator = comm.PSKModulator(M,'BitInput',true);
% Modulate and plot the data
d = step(hModulator, data);

% Mo hinh tuong duong bang goc
t = 0:T_sym/50:T_sym;
p = sqrt(2*Es/T_sym)*(1-cos(2*pi*t/T_sym));
plot(t, p);

% Xac dinh dang tin hieu phat voi 10 ky hieu dau tien
pp = repmat(p,10,1);    % clone vector p
y = diag(d(1:10))*pp;
% convert matrix to vector
y = y';
y = y(:)';

%% Transmit signal through an AWGN channel.
d_noise = zeros(size(SNR), size(d));
d_demod = zeros(size(SNR), size(data));

for k = 1:3
    d_noise(k, :) = awgn(d, SNR(k), 'measured');
end
y_noise = awgn(y, SNR(2), 'measured');

%% Demodulation
hDemod = comm.PSKDemodulator(M, 'BitOutput', true);
for k = 1:3
    d_demod(k, :) = step(hDemod, d_noise(k, :)');
end


%% Tinh BER
BER = zeros(1, length(SNR));
for k = 1:3
    BER(k) = sum(abs(d_demod(k,:)' - data))/length(data);
end
%% Plotting
h = scatterplot(d_noise(2, :),1,0,'xb');
hold on;
scatterplot(d,1,0,'or',h);
grid on;

figure(3)
plot(SNR, BER);

figure(4)
subplot(2,1,1)
stem([real(y) imag(y)])
title('Dang xung phat')
subplot(2,1,2)
stem([real(y_noise) imag(y_noise)])
hold on
plot([real(y) imag(y)],'color','r')
title('Dang tin hieu tai bo thu')

eyediagram([real(y) imag(y)],length(p)*2)
title('Bieu do mat tin hieu phat')

eyediagram([real(y_noise) imag(y_noise)],length(p)*2)
title('Bieu do mat tin hieu tai bo thu')

